package pack.zdrowie

import android.content.Intent
import android.os.Bundle
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.app.AppCompatDelegate
import androidx.core.view.WindowCompat
import androidx.core.view.WindowInsetsCompat
import androidx.core.view.ViewCompat
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.launch
import pack.zdrowie.database.AppDatabase
import pack.zdrowie.database.DatabaseProvider
import pack.zdrowie.database.entities.User
import pack.zdrowie.databinding.ActivityLoginBinding
import pack.zdrowie.databinding.ActivityRegisterBinding
import java.time.LocalDate

/**
 * Activity handling new user registration process.
 *
 * <p>This activity provides:
 * <ul>
 *   <li>User registration form with validation</li>
 *   <li>Email uniqueness checking</li>
 *   <li>Secure password handling</li>
 *   <li>Database persistence</li>
 *   <li>Dark theme support</li>
 *   <li>Edge-to-edge display</li>
 * </ul>
 *
 * <p>Registration flow:
 * <ol>
 *   <li>User enters email and password</li>
 *   <li>System validates input format</li>
 *   <li>Checks email availability</li>
 *   <li>Creates new user account</li>
 *   <li>Redirects to login screen on success</li>
 * </ol>
 */
class RegisterActivity : AppCompatActivity() {

    /**
     * View binding instance for activity_register layout
     */
    private lateinit var binding: ActivityRegisterBinding

    /**
     * Database instance for user data operations
     */
    lateinit var database: AppDatabase

    /**
     * Initializes activity components and UI.
     *
     * <p>Performs following setup:
     * <ul>
     *   <li>Enables edge-to-edge display</li>
     *   <li>Sets dark theme</li>
     *   <li>Initializes view binding</li>
     *   <li>Configures window insets</li>
     *   <li>Establishes database connection</li>
     *   <li>Sets up register button listener</li>
     * </ul>
     *
     * @param savedInstanceState Persisted state from previous instance
     */
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        // Force dark theme
        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)

        binding = ActivityRegisterBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // Configure modern edge-to-edge UI
        WindowCompat.setDecorFitsSystemWindows(window, false)

        // Handle system bars insets for older APIs
        ViewCompat.setOnApplyWindowInsetsListener(binding.root) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }

        // Initialize database connection
        database = DatabaseProvider.getDatabase(this)

        // Set register button click handler
        binding.loginButton.setOnClickListener { registerUser() }
    }

    /**
     * Handles complete user registration process.
     *
     * <p>Execution flow:
     * <ol>
     *   <li>Validates form inputs</li>
     *   <li>Checks email uniqueness</li>
     *   <li>Creates new user entity</li>
     *   <li>Persists user to database</li>
     *   <li>Provides user feedback</li>
     *   <li>Redirects to login on success</li>
     * </ol>
     *
     * <p>Runs in lifecycleScope to ensure proper coroutine cancellation.
     */
    private fun registerUser() {
        lifecycleScope.launch {
            val email = binding.emailLayout.editText?.text?.toString().orEmpty()
            val pass = binding.passwordLayout.editText?.text?.toString().orEmpty()
            val pass2 = binding.password2Layout.editText?.text?.toString().orEmpty()

            if (!isFormValid(email, pass, pass2)) return@launch
            if (isEmailUsed(email)) {
                Toast.makeText(this@RegisterActivity, getString(R.string.email_used), Toast.LENGTH_SHORT).show()
                return@launch
            }

            val userCount = database.userDao().getCount()
            val newUser = User(
                userId = 0, // Auto-generated by Room
                userName = "user$userCount",
                userMail = email,
                userPassword = pass,
                userWeight = 0.0f,
                userHeight = 0.0f,
                userDateOfBirth = LocalDate.of(2000, 1, 1) // Default date
            )

            try {
                database.userDao().insert(newUser)
                Toast.makeText(this@RegisterActivity, getString(R.string.user_registered), Toast.LENGTH_SHORT).show()
                // Navigate to login screen
                startActivity(Intent(this@RegisterActivity, LoginActivity::class.java))
            } catch (e: Exception) {
                Toast.makeText(this@RegisterActivity, getString(R.string.error_adding_user), Toast.LENGTH_SHORT).show()
            }
        }
    }

    /**
     * Validates registration form inputs.
     *
     * @param email Email address to validate
     * @param pass Password to validate
     * @param pass2 Password confirmation to validate
     * @return true if all inputs are valid, false otherwise
     *
     * <p>Validation rules:
     * <ul>
     *   <li>Email must be non-empty and match email pattern</li>
     *   <li>Password must be non-empty</li>
     *   <li>Password confirmation must match password</li>
     * </ul>
     *
     * <p>Shows appropriate Toast messages for invalid inputs.
     */
    private fun isFormValid(email: String, pass: String, pass2: String): Boolean {
        val emailRegex = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$".toRegex()

        if (email.isBlank()) {
            Toast.makeText(this, getString(R.string.no_email), Toast.LENGTH_SHORT).show()
            return false
        }
        if (!emailRegex.matches(email)) {
            Toast.makeText(this, getString(R.string.wrong_email), Toast.LENGTH_SHORT).show()
            return false
        }
        if (pass.isBlank()) {
            Toast.makeText(this, getString(R.string.no_password), Toast.LENGTH_SHORT).show()
            return false
        }
        if (pass2.isBlank() || pass2 != pass) {
            Toast.makeText(this, getString(R.string.mismatch_password), Toast.LENGTH_SHORT).show()
            return false
        }
        return true
    }

    /**
     * Checks if email is already registered in database.
     *
     * @param email Email address to check
     * @return true if email exists in database, false otherwise
     */
    private suspend fun isEmailUsed(email: String): Boolean {
        return database.userDao().getEmailCount(email) > 0
    }

    /**
     * Provides access to view binding for testing purposes.
     *
     * @return The activity's view binding instance
     */
    fun getBinding(): ActivityRegisterBinding {
        return binding
    }
}